{"ast":null,"code":"var _jsxFileName = \"D:\\\\goit-react-hw-04-hooks-feedback\\\\src\\\\App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from \"components/Statistics/Statistics\";\nimport Section from \"components/Section/Section\";\nimport Notification from \"components/Notification/Notification\";\nimport { Container } from \"components/FeedbackOptions/FeedbackOptions.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveFeedback = e => {\n    switch (e.currentTarget.textContent.toLowerCase()) {\n      case 'good':\n        setGood(good + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n\n      case 'bad':\n        setBad(bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    const total = bad + good + neutral;\n    return total;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const result = countTotalFeedback();\n    const percentage = good * 100 / result;\n    return Math.round(percentage);\n  };\n\n  const total = countTotalFeedback();\n  const positivePercentage = countPositiveFeedbackPercentage();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        title: \"Please leave feedback\",\n        children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n          options: ['Good', 'Neutral', 'Bad'],\n          onLeaveFeedback: onLeaveFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 2\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 2\n      }, this), total === 0 ? /*#__PURE__*/_jsxDEV(Notification, {\n        message: \"No feedback given\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(Section, {\n        title: \"Statistics\",\n        children: /*#__PURE__*/_jsxDEV(Statistics, {\n          total: total,\n          positivePercentage: positivePercentage,\n          good: good,\n          bad: bad,\n          neutral: neutral\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 4\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 2\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"wgmLIjprodMARj1ijTQlrTmzk/c=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/goit-react-hw-04-hooks-feedback/src/App.jsx"],"names":["React","useState","FeedbackOptions","Statistics","Section","Notification","Container","App","good","setGood","neutral","setNeutral","bad","setBad","onLeaveFeedback","e","currentTarget","textContent","toLowerCase","countTotalFeedback","total","countPositiveFeedbackPercentage","result","percentage","Math","round","positivePercentage"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,SAASC,SAAT,QAA0B,mDAA1B;;;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAQC,OAAR,IAAmBR,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM,CAACS,OAAD,EAAWC,UAAX,IAAyBV,QAAQ,CAAC,CAAD,CAAvC;AACA,QAAM,CAACW,GAAD,EAAOC,MAAP,IAAiBZ,QAAQ,CAAC,CAAD,CAA/B;;AAEA,QAAMa,eAAe,GAAGC,CAAD,IAAO;AAE/B,YAAOA,CAAC,CAACC,aAAF,CAAgBC,WAAhB,CAA4BC,WAA5B,EAAP;AACC,WAAK,MAAL;AACET,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACA;;AAEF,WAAK,SAAL;AACEG,QAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACA;;AAEF,WAAK,KAAL;AACEG,QAAAA,MAAM,CAACD,GAAG,GAAG,CAAP,CAAN;AACA;;AAEF;AACE;AAdH;AAiBE,GAnBD;;AAoBA,QAAOO,kBAAkB,GAAG,MAAM;AAEhC,UAAOC,KAAK,GAAGR,GAAG,GAAGJ,IAAN,GAAaE,OAA5B;AACD,WAAOU,KAAP;AAGA,GAND;;AAQD,QAAOC,+BAA+B,GAAG,MAAM;AAC9C,UAAMC,MAAM,GAAGH,kBAAkB,EAAjC;AACA,UAAMI,UAAU,GAAIf,IAAI,GAAG,GAAR,GAAgBc,MAAnC;AACA,WAAOE,IAAI,CAACC,KAAL,CAAWF,UAAX,CAAP;AAEC,GALF;;AAQC,QAAMH,KAAK,GAAGD,kBAAkB,EAAhC;AACA,QAAMO,kBAAkB,GAAGL,+BAA+B,EAA1D;AACA,sBACE;AAAA,2BACH,QAAC,SAAD;AAAA,8BACA,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,uBAAf;AAAA,+BACA,QAAC,eAAD;AACA,UAAA,OAAO,EAAE,CAAC,MAAD,EAAU,SAAV,EAAsB,KAAtB,CADT;AAEA,UAAA,eAAe,EAAEP;AAFjB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADA,EAOEM,KAAK,KAAK,CAAV,gBAAe,QAAC,YAAD;AAAc,QAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cAAf,gBACD,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,YAAf;AAAA,+BACC,QAAC,UAAD;AACA,UAAA,KAAK,EAAIA,KADT;AACiB,UAAA,kBAAkB,EAAKM,kBADxC;AAC4D,UAAA,IAAI,EAAElB,IADlE;AACwE,UAAA,GAAG,EAAEI,GAD7E;AACkF,UAAA,OAAO,EAAGF;AAD5F;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cARD;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,mBADF;AAmBD;;GA9DuBH,G;;KAAAA,G","sourcesContent":["\r\nimport React , {useState}  from \"react\";\r\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\r\nimport Statistics from \"components/Statistics/Statistics\";\r\nimport Section from \"components/Section/Section\";\r\nimport Notification from \"components/Notification/Notification\";\r\nimport { Container } from \"components/FeedbackOptions/FeedbackOptions.styled\";\r\n\r\n\r\nexport default function App() {\r\n  const [good , setGood] = useState(0) ;\r\n  const [neutral , setNeutral] = useState(0) ;\r\n  const [bad , setBad] = useState(0) ;\r\n\r\n  const onLeaveFeedback =(e) => {\r\n    \r\n switch(e.currentTarget.textContent.toLowerCase()) {\r\n  case 'good':\r\n    setGood(good + 1);\r\n    break;\r\n\r\n  case 'neutral':\r\n    setNeutral(neutral + 1);\r\n    break;\r\n\r\n  case 'bad':\r\n    setBad(bad + 1);\r\n    break;\r\n\r\n  default:\r\n    return;\r\n\r\n }\r\n  }\r\n  const  countTotalFeedback = () => {\r\n    \r\n    const  total = bad + good + neutral ; \r\n   return total ;\r\n  \r\n  \r\n  }\r\n  \r\n const  countPositiveFeedbackPercentage = () => {\r\n  const result = countTotalFeedback() ; \r\n  const percentage = (good * 100 ) / result ;\r\n  return Math.round(percentage) ;\r\n  \r\n  }\r\n  \r\n\r\n  const total = countTotalFeedback() ;\r\n  const positivePercentage = countPositiveFeedbackPercentage() ;\r\n  return (\r\n    <>\r\n <Container>\r\n <Section title=\"Please leave feedback\">\r\n <FeedbackOptions \r\n options={['Good' , 'Neutral' , 'Bad']} \r\n onLeaveFeedback={onLeaveFeedback} \r\n /></Section>\r\n \r\n  {total === 0 ? (<Notification message=\"No feedback given\" />) : (\r\n  <Section title=\"Statistics\">\r\n   <Statistics \r\n   total = {total } positivePercentage  = {positivePercentage} good={good} bad={bad} neutral= {neutral}/>\r\n  </Section>)}\r\n  </Container></>\r\n \r\n \r\n  )\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}